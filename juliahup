#!/bin/sh
# juliahup will prepare and submit a Julia job and email the user when it
# is finished
# new to 2.3 - added option functionality
#            - added option to suppress email
#            - adjusted how errors are handled

### Setup options; if incorrect, notify of error and exit
email=yes
while getopts ':e' opt ; do
	case $opt in
		e) email=no ;;
		\?) echo "Invalid option: -$OPTARG" 
		    exit ;;
	esac
done
# skip over the processed options
shift $((OPTIND-1)) 

### Test usage; if incorrect, output correct usage and exit
if [ "$#" -gt 2  -o  "$#" -eq 0 ]; then
	echo "********************************************************************"
	echo "*                        Juliahup version 2.3                      *"
	echo "********************************************************************"
	echo -e "The 'juliahup' script submits Julia batch jobs using nohup. \n"
	echo -e "usage: juliahup [-e] file.m [output.log] \n"
	echo -e "If only input_file.m is used, then input_file.mlog will be created. \n"
	echo -e "Spaces in the filename or directory name may cause failure. \n"
	exit
fi
# Stem and extension of file
filestem=`echo $1 | cut -f1 -d.`
extension=`echo $1 | cut -f2 -d.`

### Test if file exist
if [[ ! -r $1 ]]; then
	echo -e "\n File does not exist, or option mispecified \n"
	exit
fi

### Test file extension
if [[ $extension != jl ]]; then
	echo -e "\n Invalid input file, must be a jl-file \n"
	exit
fi

### Main file
# Direct output, conditional on number of arguments
if [[ "$#" -eq 1 ]]; then
	output=$filestem.mlog
else
	output=$2
fi
echo "juliahup:directing output to $output"

# Use user-defined 'TMPDIR' if possible; else, use /tmp
if [[ -n $TMPDIR ]]; then
	pathy=$TMPDIR
else
	pathy=/tmp
fi

# Tempfile to enable emailing content
timer=`mktemp $pathy/timer.XXXXXX` || exit 1
chmod 600 $timer

# Tempfile for the script
shell=`mktemp $pathy/shell.XXXXXX` || exit 1
chmod 700 $shell

# Create email body: path, filename, and start time
starter=`date`
echo "$PWD/$1 finished" >> $timer
echo "$starter S"       >> $timer

# Create script; add end time to email subject
echo "#!/bin/sh"                                                                           >> $shell
echo "time -p /usr/bin/julia < $1 > $output"                                               >> $shell
echo "date >> $timer"                                                                      >> $shell
if [[ $email == "yes" ]]; then
	echo "mutt -s \"$1 finished\" -a $output nohup.out -- $USER@duke.edu < $timer"         >> $shell
fi
nohup $shell &

# Nohup takes a split second longer than other commands
sleep 0.01s
